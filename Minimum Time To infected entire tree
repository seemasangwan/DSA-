1. BFS APPROACH
   /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode*root, unordered_map<int,vector<int>>&graph,int parent)
    {   if(!root) return;
         if(parent!=-1)
        graph[root->val].push_back(parent);
        if(root->left)
        graph[root->val].push_back((root->left)->val);
        if(root->right)
         graph[root->val].push_back((root->right)->val);
         if(root->left) solve(root->left,graph,root->val);
         solve(root->right,graph,root->val);
    }
    int res=0;
    int amountOfTime(TreeNode* root, int start) {
    unordered_map<int,vector<int>>graph;
        solve(root,graph,-1);
        queue<pair<int,int>>q;
        unordered_map<int,bool>visit;
        visit[start]=true;
        q.push({start,0});
        int Time=0;
        
        while(!q.empty())
        {
            int node=q.front().first;
            int time=q.front().second;
            Time=max(time,Time);
            q.pop();
            for(auto it:graph[node])
            {
                if(visit[it]==false)
               { q.push({it,time+1});
                 visit[it]=true;}
              
        }
        }
      
        if(visit.size()==graph.size()) return Time;
        return INT_MAX;
       
       
           
 
    }
};

DFS   

  int res=0;
    int depth(TreeNode*root,int start)
    {
         if(!root) return 0;
         int l=depth(root->left,start);
         int r=depth(root->right,start);
         if(l<0)
         {
             res=max(res,abs(l)+abs(r));
             return l-1;
         }
         if(r<0)
         {
               res=max(res,abs(l)+abs(r));
             return r-1;
         }
         if(root->val==start)
        { res=max(l,r);
        return -1;}
        return max(l,r)+1;

    }
 int amountOfTime(TreeNode* root, int start)
  {depth(root,start);
             return res;}
